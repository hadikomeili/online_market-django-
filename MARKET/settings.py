"""
Django settings for MARKET project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from logging import LogRecord
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x#bt*#yq0*9gah7f%cljyv+(ipscs9xuw@vw6=%hg16zw=le&('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'core',
    'landing',
    'product',
    'customer',
    'order',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.MyMiddleware'
]

ROOT_URLCONF = 'MARKET.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MARKET.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",

]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'static'

LOCALE_PATHS = [BASE_DIR / 'locale']

AUTH_USER_MODEL = 'core.User'

LOGIN_URL = 'customer:login'

LOGIN_REDIRECT_URL = 'customer:customer_dashboard'

LOGOUT_REDIRECT_URL = 'product:product_index'


# REST_FRAMEWORK = {
#     'PAGE_SIZE': 4
# }


def length_limit(record: LogRecord):
    if len(record.getMessage()) <= 20:
        return record.getMessage()


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'format1': {
            'format': '{levelname} ({asctime}): "{message}"',
            'style': '{'
        },
        'format2': {
            'format': '{levelname} ({asctime}): "{message}" at {module} (process: {process}, thread: {threadName})',
            'style': '{'
        }
    },
    'filters': {
        'my-filter': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': length_limit
        }
    },
    'handlers': {
        'my-console': {
            'class': 'logging.StreamHandler',
            'formatter': 'format1',
            'filters': ['my-filter']
        },
        'my-file': {
            'class': 'logging.FileHandler',
            'formatter': 'format2',
            'level': 'ERROR',
            'filename': BASE_DIR / 'log/my-logging.log'
        }
    },
    'root': {
        'handlers': ['my-console'],
        'level': 'DEBUG'
    },
    'loggers': {
        'project': {
            'handlers': ['my-file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'project.developers': {
            'handlers': ['my-file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}